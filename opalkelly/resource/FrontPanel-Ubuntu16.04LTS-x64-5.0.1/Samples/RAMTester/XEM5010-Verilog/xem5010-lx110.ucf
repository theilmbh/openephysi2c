#-------------------------------
# FrontPanel Host Interface pins
#-------------------------------
NET "hi_in<0>"      LOC="AD13" | IOSTANDARD="LVCMOS33";
NET "hi_in<1>"      LOC="AD15" | IOSTANDARD="LVCMOS33";
NET "hi_in<2>"      LOC="AD14" | IOSTANDARD="LVCMOS33";
NET "hi_in<3>"      LOC="AB12" | IOSTANDARD="LVCMOS33";
NET "hi_in<4>"      LOC="Y8"   | IOSTANDARD="LVCMOS33";
NET "hi_in<5>"      LOC="AA8"  | IOSTANDARD="LVCMOS33";
NET "hi_in<6>"      LOC="AA17" | IOSTANDARD="LVCMOS33";
NET "hi_in<7>"      LOC="AB17" | IOSTANDARD="LVCMOS33";
NET "hi_out<0>"     LOC="AC14" | IOSTANDARD="LVCMOS33";
NET "hi_out<1>"     LOC="AC11" | IOSTANDARD="LVCMOS33";
NET "hi_inout<0>"   LOC="AD18" | IOSTANDARD="LVCMOS33";
NET "hi_inout<1>"   LOC="AC18" | IOSTANDARD="LVCMOS33";
NET "hi_inout<2>"   LOC="AB10" | IOSTANDARD="LVCMOS33";
NET "hi_inout<3>"   LOC="AB9"  | IOSTANDARD="LVCMOS33";
NET "hi_inout<4>"   LOC="AC17" | IOSTANDARD="LVCMOS33";
NET "hi_inout<5>"   LOC="AC16" | IOSTANDARD="LVCMOS33";
NET "hi_inout<6>"   LOC="AC8"  | IOSTANDARD="LVCMOS33";
NET "hi_inout<7>"   LOC="AC9"  | IOSTANDARD="LVCMOS33";
NET "hi_inout<8>"   LOC="Y12"  | IOSTANDARD="LVCMOS33";
NET "hi_inout<9>"   LOC="Y13"  | IOSTANDARD="LVCMOS33";
NET "hi_inout<10>"  LOC="AA15" | IOSTANDARD="LVCMOS33";
NET "hi_inout<11>"  LOC="AB14" | IOSTANDARD="LVCMOS33";
NET "hi_inout<12>"  LOC="AA12" | IOSTANDARD="LVCMOS33";
NET "hi_inout<13>"  LOC="AB11" | IOSTANDARD="LVCMOS33";
NET "hi_inout<14>"  LOC="AA13" | IOSTANDARD="LVCMOS33";
NET "hi_inout<15>"  LOC="AA14" | IOSTANDARD="LVCMOS33";
NET "hi_muxsel"     LOC="AB15" | IOSTANDARD="LVCMOS33";

NET "led<0>"        LOC="AD10" | IOSTANDARD="LVCMOS33";
NET "led<1>"        LOC="AC12" | IOSTANDARD="LVCMOS33";
NET "led<2>"        LOC="AD11" | IOSTANDARD="LVCMOS33";
NET "led<3>"        LOC="AC13" | IOSTANDARD="LVCMOS33";

CONFIG DCI_CASCADE = "16 12";
CONFIG DCI_CASCADE = "15 11";

############################################################################
# Clock constraints                                                        #
############################################################################

NET "u_infrastructure/sys_clk_ibufg" TNM_NET =  "SYS_CLK";
TIMESPEC "TS_SYS_CLK_DDR2_f0" = PERIOD "SYS_CLK" 10.0 ns HIGH 50 %;

NET "hi_in[0]" TNM_NET = "HI_CLK";
TIMESPEC "TS_HI_CLK" = PERIOD "HI_CLK" 20.83 ns HIGH 50 %;

NET "u_infrastructure/clk200_bufg" TNM_NET = "SYS_CLK_200";
TIMESPEC "TS_SYS_CLK_200" = PERIOD "SYS_CLK_200" 5.0 ns HIGH 50 %;

NET "sys_clk_p"      LOC="AD8" | IOSTANDARD="LVDS_25";
NET "sys_clk_n"      LOC="AC7" | IOSTANDARD="LVDS_25";


################################################################################
# I/O STANDARDS
################################################################################
#NET "ssram_clk"      LOC="R22" | IOSTANDARD="LVCMOS18" | FAST;
#NET "ssram_adv_ld"   LOC="J5"  | IOSTANDARD="LVCMOS18";
#NET "ssram_cke_n"    LOC="L4"  | IOSTANDARD="LVCMOS18";
#NET "ssram_ce1_n"    LOC="M22" | IOSTANDARD="LVCMOS18";
#NET "ssram_oe_n"     LOC="K22" | IOSTANDARD="LVCMOS18";
#NET "ssram_we_n"     LOC="J21" | IOSTANDARD="LVCMOS18";
#NET "ssram_ft"       LOC="M6"  | IOSTANDARD="LVCMOS18";
#NET "ssram_zz"       LOC="K5"  | IOSTANDARD="LVCMOS18";
#NET "ssram_a<0>"     LOC="L5"  | IOSTANDARD="LVCMOS18";
#NET "ssram_a<1>"     LOC="M5"  | IOSTANDARD="LVCMOS18";
#NET "ssram_a<2>"     LOC="M4"  | IOSTANDARD="LVCMOS18";
#NET "ssram_a<3>"     LOC="L3"  | IOSTANDARD="LVCMOS18";
#NET "ssram_a<4>"     LOC="J4"  | IOSTANDARD="LVCMOS18";
#NET "ssram_a<5>"     LOC="H4"  | IOSTANDARD="LVCMOS18";
#NET "ssram_a<6>"     LOC="G4"  | IOSTANDARD="LVCMOS18";
#NET "ssram_a<7>"     LOC="P3"  | IOSTANDARD="LVCMOS18";
#NET "ssram_a<8>"     LOC="N4"  | IOSTANDARD="LVCMOS18";
#NET "ssram_a<9>"     LOC="T3"  | IOSTANDARD="LVCMOS18";
#NET "ssram_a<10>"    LOC="R3"  | IOSTANDARD="LVCMOS18";
#NET "ssram_a<11>"    LOC="H19" | IOSTANDARD="LVCMOS18";
#NET "ssram_a<12>"    LOC="K20" | IOSTANDARD="LVCMOS18";
#NET "ssram_a<13>"    LOC="P19" | IOSTANDARD="LVCMOS18";
#NET "ssram_a<14>"    LOC="R23" | IOSTANDARD="LVCMOS18";
#NET "ssram_a<15>"    LOC="J23" | IOSTANDARD="LVCMOS18";
#NET "ssram_a<16>"    LOC="N23" | IOSTANDARD="LVCMOS18";
#NET "ssram_a<17>"    LOC="L23" | IOSTANDARD="LVCMOS18";
#NET "ssram_a<18>"    LOC="K23" | IOSTANDARD="LVCMOS18";
#NET "ssram_a<19>"    LOC="H23" | IOSTANDARD="LVCMOS18";
#NET "ssram_a<20>"    LOC="P23" | IOSTANDARD="LVCMOS18";  # NC for 36Mb SSRAM
#NET "ssram_d<0>"     LOC="R7"  | IOSTANDARD="LVCMOS18";
#NET "ssram_d<1>"     LOC="R5"  | IOSTANDARD="LVCMOS18";
#NET "ssram_d<2>"     LOC="P4"  | IOSTANDARD="LVCMOS18";
#NET "ssram_d<3>"     LOC="R6"  | IOSTANDARD="LVCMOS18";
#NET "ssram_d<4>"     LOC="P6"  | IOSTANDARD="LVCMOS18";
#NET "ssram_d<5>"     LOC="N6"  | IOSTANDARD="LVCMOS18";
#NET "ssram_d<6>"     LOC="P5"  | IOSTANDARD="LVCMOS18";
#NET "ssram_d<7>"     LOC="M7"  | IOSTANDARD="LVCMOS18";
#NET "ssram_d<8>"     LOC="M19" | IOSTANDARD="LVCMOS18";
#NET "ssram_d<9>"     LOC="L20" | IOSTANDARD="LVCMOS18";
#NET "ssram_d<10>"    LOC="M21" | IOSTANDARD="LVCMOS18";
#NET "ssram_d<11>"    LOC="P20" | IOSTANDARD="LVCMOS18";
#NET "ssram_d<12>"    LOC="N21" | IOSTANDARD="LVCMOS18";
#NET "ssram_d<13>"    LOC="P21" | IOSTANDARD="LVCMOS18";
#NET "ssram_d<14>"    LOC="N22" | IOSTANDARD="LVCMOS18";
#NET "ssram_d<15>"    LOC="L22" | IOSTANDARD="LVCMOS18";
#NET "ssram_d<16>"    LOC="H9"  | IOSTANDARD="LVCMOS18";
#NET "ssram_d<17>"    LOC="G11" | IOSTANDARD="LVCMOS18";
#NET "ssram_d<18>"    LOC="G10" | IOSTANDARD="LVCMOS18";
#NET "ssram_d<19>"    LOC="H11" | IOSTANDARD="LVCMOS18";
#NET "ssram_d<20>"    LOC="G12" | IOSTANDARD="LVCMOS18";
#NET "ssram_d<21>"    LOC="H12" | IOSTANDARD="LVCMOS18";
#NET "ssram_d<22>"    LOC="F13" | IOSTANDARD="LVCMOS18";
#NET "ssram_d<23>"    LOC="H13" | IOSTANDARD="LVCMOS18";
#NET "ssram_d<24>"    LOC="G14" | IOSTANDARD="LVCMOS18";
#NET "ssram_d<25>"    LOC="H14" | IOSTANDARD="LVCMOS18";
#NET "ssram_d<26>"    LOC="G15" | IOSTANDARD="LVCMOS18";
#NET "ssram_d<27>"    LOC="F15" | IOSTANDARD="LVCMOS18";
#NET "ssram_d<28>"    LOC="H17" | IOSTANDARD="LVCMOS18";
#NET "ssram_d<29>"    LOC="G17" | IOSTANDARD="LVCMOS18";
#NET "ssram_d<30>"    LOC="G16" | IOSTANDARD="LVCMOS18";
#NET "ssram_d<31>"    LOC="G19" | IOSTANDARD="LVCMOS18";
#NET "ssram_dp<0>"    LOC="N7"  | IOSTANDARD="LVCMOS18";
#NET "ssram_dp<1>"    LOC="L19" | IOSTANDARD="LVCMOS18";
#NET "ssram_dp<2>"    LOC="G9"  | IOSTANDARD="LVCMOS18";
#NET "ssram_dp<3>"    LOC="H18" | IOSTANDARD="LVCMOS18";


NET  "ddr2a_dq[*]"                              IOSTANDARD = SSTL18_II_DCI;
NET  "ddr2a_a[*]"                               IOSTANDARD = SSTL18_II_DCI;
NET  "ddr2a_ba[*]"                              IOSTANDARD = SSTL18_II_DCI;
NET  "ddr2a_ras_n"                              IOSTANDARD = SSTL18_II_DCI;
NET  "ddr2a_cas_n"                              IOSTANDARD = SSTL18_II_DCI;
NET  "ddr2a_we_n"                               IOSTANDARD = SSTL18_II_DCI;
NET  "ddr2a_cs_n[*]"                            IOSTANDARD = SSTL18_II_DCI;
NET  "ddr2a_odt[*]"                             IOSTANDARD = SSTL18_II_DCI;
NET  "ddr2a_cke[*]"                             IOSTANDARD = SSTL18_II_DCI;
NET  "ddr2a_dm[*]"                              IOSTANDARD = SSTL18_II_DCI;
NET  "ddr2a_dqs[*]"                             IOSTANDARD = DIFF_SSTL18_II_DCI;
NET  "ddr2a_dqs_n[*]"                           IOSTANDARD = DIFF_SSTL18_II_DCI;
NET  "ddr2a_ck[*]"                              IOSTANDARD = DIFF_SSTL18_II_DCI;
NET  "ddr2a_ck_n[*]"                            IOSTANDARD = DIFF_SSTL18_II_DCI;

NET  "ddr2b_dq[*]"                              IOSTANDARD = SSTL18_II_DCI;
NET  "ddr2b_a[*]"                               IOSTANDARD = SSTL18_II_DCI;
NET  "ddr2b_ba[*]"                              IOSTANDARD = SSTL18_II_DCI;
NET  "ddr2b_ras_n"                              IOSTANDARD = SSTL18_II_DCI;
NET  "ddr2b_cas_n"                              IOSTANDARD = SSTL18_II_DCI;
NET  "ddr2b_we_n"                               IOSTANDARD = SSTL18_II_DCI;
NET  "ddr2b_cs_n[*]"                            IOSTANDARD = SSTL18_II_DCI;
NET  "ddr2b_odt[*]"                             IOSTANDARD = SSTL18_II_DCI;
NET  "ddr2b_cke[*]"                             IOSTANDARD = SSTL18_II_DCI;
NET  "ddr2b_dm[*]"                              IOSTANDARD = SSTL18_II_DCI;
NET  "ddr2b_dqs[*]"                             IOSTANDARD = DIFF_SSTL18_II_DCI;
NET  "ddr2b_dqs_n[*]"                           IOSTANDARD = DIFF_SSTL18_II_DCI;
NET  "ddr2b_ck[*]"                              IOSTANDARD = DIFF_SSTL18_II_DCI;
NET  "ddr2b_ck_n[*]"                            IOSTANDARD = DIFF_SSTL18_II_DCI;

################################################################################
# Location Constraints -- original MIG locations shown at right.
################################################################################
NET  "ddr2a_dq[0]"                               LOC = "D11" ;	      #Bank 16
NET  "ddr2a_dq[1]"                               LOC = "D10" ;	      #Bank 16
NET  "ddr2a_dq[2]"                               LOC = "C11" ;	      #Bank 16
NET  "ddr2a_dq[3]"                               LOC = "C12" ;	      #Bank 16
NET  "ddr2a_dq[4]"                               LOC = "B12" ;	      #Bank 16
NET  "ddr2a_dq[5]"                               LOC = "A13" ;	      #Bank 16
NET  "ddr2a_dq[6]"                               LOC = "A12" ;	      #Bank 16
NET  "ddr2a_dq[7]"                               LOC = "C9"  ;	      #Bank 16
NET  "ddr2a_dq[8]"                               LOC = "B9"  ;	      #Bank 16
NET  "ddr2a_dq[9]"                               LOC = "B10" ;	      #Bank 16
NET  "ddr2a_dq[10]"                              LOC = "B11" ;	      #Bank 16
NET  "ddr2a_dq[11]"                              LOC = "A10" ;	      #Bank 16
NET  "ddr2a_dq[12]"                              LOC = "A8"  ;	      #Bank 16
NET  "ddr2a_dq[13]"                              LOC = "B5"  ;	      #Bank 16
NET  "ddr2a_dq[14]"                              LOC = "B6"  ;	      #Bank 16
NET  "ddr2a_dq[15]"                              LOC = "D3"  ;	      #Bank 16
NET  "ddr2a_a[12]"                               LOC = "C6"  ;	      #Bank 16
NET  "ddr2a_a[11]"                               LOC = "C7"  ;	      #Bank 16
NET  "ddr2a_a[10]"                               LOC = "C4"  ;	      #Bank 16
NET  "ddr2a_a[9]"                                LOC = "B4"  ;	      #Bank 16
NET  "ddr2a_a[8]"                                LOC = "C2"  ;	      #Bank 16
NET  "ddr2a_a[7]"                                LOC = "C3"  ;	      #Bank 16
NET  "ddr2a_a[6]"                                LOC = "A2"  ;	      #Bank 16
NET  "ddr2a_a[5]"                                LOC = "A3"  ;	      #Bank 16
NET  "ddr2a_a[4]"                                LOC = "D1"  ;	      #Bank 16
NET  "ddr2a_a[3]"                                LOC = "C1"  ;	      #Bank 16
NET  "ddr2a_a[2]"                                LOC = "B1"  ;	      #Bank 16
NET  "ddr2a_a[1]"                                LOC = "B2"  ;	      #Bank 16
NET  "ddr2a_a[0]"                                LOC = "E7"  ;	      #Bank 12
NET  "ddr2a_ba[2]"                               LOC = "F7"  ;	      #Bank 12
NET  "ddr2a_ba[1]"                               LOC = "E6"  ;	      #Bank 12
NET  "ddr2a_ba[0]"                               LOC = "E5"  ;	      #Bank 12
NET  "ddr2a_ras_n"                               LOC = "G6"  ;	      #Bank 12
NET  "ddr2a_cas_n"                               LOC = "G7"  ;	      #Bank 12
NET  "ddr2a_we_n"                                LOC = "F5"  ;	      #Bank 12
NET  "ddr2a_cs_n[0]"                             LOC = "F4"  ;	      #Bank 12
NET  "ddr2a_odt[0]"                              LOC = "J6"  ;	      #Bank 12
NET  "ddr2a_cke[0]"                              LOC = "H6"  ;	      #Bank 12
NET  "ddr2a_dm[0]"                               LOC = "C13" ;	      #Bank 16
NET  "ddr2a_dm[1]"                               LOC = "A9"  ;	      #Bank 16
NET  "ddr2a_dqs[0]"                              LOC = "D8"  ;	      #Bank 16
NET  "ddr2a_dqs_n[0]"                            LOC = "C8"  ;	      #Bank 16
NET  "ddr2a_dqs[1]"                              LOC = "B7"  ;	      #Bank 16
NET  "ddr2a_dqs_n[1]"                            LOC = "A7"  ;	      #Bank 16
NET  "ddr2a_ck[0]"                               LOC = "D5"  ;	      #Bank 16
NET  "ddr2a_ck_n[0]"                             LOC = "D6"  ;	      #Bank 16

NET  "ddr2b_dq[0]"                                LOC = "C14" ;	      #Bank 15
NET  "ddr2b_dq[1]"                                LOC = "B14" ;	      #Bank 15
NET  "ddr2b_dq[2]"                                LOC = "A14" ;	      #Bank 15
NET  "ddr2b_dq[3]"                                LOC = "A15" ;	      #Bank 15
NET  "ddr2b_dq[4]"                                LOC = "B16" ;	      #Bank 15
NET  "ddr2b_dq[5]"                                LOC = "D16" ;	      #Bank 15
NET  "ddr2b_dq[6]"                                LOC = "C16" ;	      #Bank 15
NET  "ddr2b_dq[7]"                                LOC = "D18" ;	      #Bank 15
NET  "ddr2b_dq[8]"                                LOC = "B17" ;	      #Bank 15
NET  "ddr2b_dq[9]"                                LOC = "A17" ;	      #Bank 15
NET  "ddr2b_dq[10]"                               LOC = "A18" ;	      #Bank 15
NET  "ddr2b_dq[11]"                               LOC = "A19" ;	      #Bank 15
NET  "ddr2b_dq[12]"                               LOC = "C18" ;	      #Bank 15
NET  "ddr2b_dq[13]"                               LOC = "B22" ;	      #Bank 15
NET  "ddr2b_dq[14]"                               LOC = "A22" ;	      #Bank 15
NET  "ddr2b_dq[15]"                               LOC = "A23" ;	      #Bank 15
NET  "ddr2b_a[12]"                                LOC = "C21" ;	      #Bank 15
NET  "ddr2b_a[11]"                                LOC = "B21" ;	      #Bank 15
NET  "ddr2b_a[10]"                                LOC = "B24" ;	      #Bank 15
NET  "ddr2b_a[9]"                                 LOC = "C23" ;	      #Bank 15
NET  "ddr2b_a[8]"                                 LOC = "D24" ;	      #Bank 15
NET  "ddr2b_a[7]"                                 LOC = "C24" ;	      #Bank 15
NET  "ddr2b_a[6]"                                 LOC = "B25" ;	      #Bank 15
NET  "ddr2b_a[5]"                                 LOC = "A25" ;	      #Bank 15
NET  "ddr2b_a[4]"                                 LOC = "B26" ;	      #Bank 15
NET  "ddr2b_a[3]"                                 LOC = "C26" ;	      #Bank 15
NET  "ddr2b_a[2]"                                 LOC = "D26" ;	      #Bank 15
NET  "ddr2b_a[1]"                                 LOC = "D25" ;	      #Bank 15
NET  "ddr2b_a[0]"                                 LOC = "G20" ;	      #Bank 11
NET  "ddr2b_ba[2]"                                LOC = "F20" ;	      #Bank 11
NET  "ddr2b_ba[1]"                                LOC = "E21" ;	      #Bank 11
NET  "ddr2b_ba[0]"                                LOC = "E20" ;	      #Bank 11
NET  "ddr2b_ras_n"                                LOC = "E22" ;	      #Bank 11
NET  "ddr2b_cas_n"                                LOC = "E23" ;	      #Bank 11
NET  "ddr2b_we_n"                                 LOC = "F22" ;	      #Bank 11
NET  "ddr2b_cs_n[0]"                              LOC = "F23" ;	      #Bank 11
NET  "ddr2b_odt[0]"                               LOC = "G21" ;	      #Bank 11
NET  "ddr2b_cke[0]"                               LOC = "H21" ;	      #Bank 11
NET  "ddr2b_dm[0]"                                LOC = "B15" ;	      #Bank 15
NET  "ddr2b_dm[1]"                                LOC = "B19" ;	      #Bank 15
NET  "ddr2b_dqs[0]"                               LOC = "A20" ;	      #Bank 15
NET  "ddr2b_dqs_n[0]"                             LOC = "B20" ;	      #Bank 15
NET  "ddr2b_dqs[1]"                               LOC = "C19" ;	      #Bank 15
NET  "ddr2b_dqs_n[1]"                             LOC = "D19" ;	      #Bank 15
NET  "ddr2b_ck[0]"                                LOC = "D21" ;	      #Bank 15
NET  "ddr2b_ck_n[0]"                              LOC = "D20" ;	      #Bank 15

###############################################################################
# Define multicycle paths - these paths may take longer because additional
# time allowed for logic to settle in calibration/initialization FSM
###############################################################################

# MIG 2.1: Eliminate Timegroup definitions for CLK0, and CLK90. Instead trace
#          multicycle paths from originating flip-flop to ANY destination
#          flip-flop (or in some cases, it can also be a BRAM)
# MUX Select for either rising/falling CLK0 for 2nd stage read capture
INST "u_ddr2_top_0/*/u_phy_calib/gen_rd_data_sel*.u_ff_rd_data_sel" TNM = "TNM_RD_DATA_SEL_C0";
TIMESPEC "TS_MC_RD_DATA_SEL_C0" = FROM "TNM_RD_DATA_SEL_C0" TO FFS
"TS_SYS_CLK_DDR2_f0" * 4;
# MUX select for read data - optional delay on data to account for byte skews
INST "u_ddr2_top_0/*/u_usr_rd/gen_rden_sel_mux*.u_ff_rden_sel_mux" TNM = "TNM_RDEN_SEL_MUX_C0";
TIMESPEC "TS_MC_RDEN_SEL_MUX_C0" = FROM "TNM_RDEN_SEL_MUX_C0" TO FFS
"TS_SYS_CLK_DDR2_f0" * 4;
# Calibration/Initialization complete status flag (for PHY logic only) - can
# be used to drive both flip-flops and BRAMs
INST "u_ddr2_top_0/*/u_phy_init/u_ff_phy_init_data_sel" TNM = "TNM_PHY_INIT_DATA_SEL_C0";
TIMESPEC "TS_MC_PHY_INIT_DATA_SEL_0_C0" = FROM "TNM_PHY_INIT_DATA_SEL_C0" TO FFS
"TS_SYS_CLK_DDR2_f0" * 4;
# The RAM path is only used in cases where Write Latency (Additive Latency + 
# (CAS Latency - 1) + (1 in case of RDIMM)) is 2 or below. So these constraints are 
# valid for CAS Latency = 3, Additive Latency = 0 and selected part is not RDIMM. 
# If Write Latency is higher than 3, then a warning will appear in PAR, 
# and the constraint can be ignored as this path does not exist. RAM constraint 
# can be safely removed if the warning is not to be displayed.
TIMESPEC "TS_MC_PHY_INIT_DATA_SEL_90_C0" = FROM "TNM_PHY_INIT_DATA_SEL_C0" TO RAMS
"TS_SYS_CLK_DDR2_f0" * 4;
# Select (address) bits for SRL32 shift registers used in stage3/stage4
# calibration
INST "u_ddr2_top_0/*/u_phy_calib/gen_gate_dly*.u_ff_gate_dly" TNM = "TNM_GATE_DLY_C0";
TIMESPEC "TS_MC_GATE_DLY_C0" = FROM "TNM_GATE_DLY_C0" TO FFS "TS_SYS_CLK_DDR2_f0" * 4;

INST "u_ddr2_top_0/*/u_phy_calib/gen_rden_dly*.u_ff_rden_dly" TNM = "TNM_RDEN_DLY_C0";
TIMESPEC "TS_MC_RDEN_DLY_C0" = FROM "TNM_RDEN_DLY_C0" TO FFS "TS_SYS_CLK_DDR2_f0" * 4;

INST "u_ddr2_top_0/*/u_phy_calib/gen_cal_rden_dly*.u_ff_cal_rden_dly"
  TNM = "TNM_CAL_RDEN_DLY_C0";
TIMESPEC "TS_MC_CAL_RDEN_DLY_C0" = FROM "TNM_CAL_RDEN_DLY_C0" TO FFS
"TS_SYS_CLK_DDR2_f0" * 4;
############################################################################### 
#The following constraint is added to prevent (false) hold time violations on
#the data path from stage1 to stage2 capture flops.  Stage1 flops are clocked by 
#the delayed DQS and stage2 flops are clocked by the clk0 clock. Placing a TIG 
#on the DQ IDDR capture flop instance to achieve this is acceptable because timing
#is guaranteed through the use of separate Predictable IP constraints. These
#violations are reported when anunconstrained path report is run.	  
############################################################################### 
INST "*/gen_dq[*].u_iob_dq/gen*.u_iddr_dq" TIG ;
###############################################################################
# DQS Read Post amble Glitch Squelch circuit related constraints
###############################################################################

###############################################################################
# LOC placement of DQS-squelch related IDDR and IDELAY elements
# Each circuit can be located at any of the following locations:
#  1. Unused "N"-side of DQS differential pair I/O
#  2. DM data mask (output only, input side is free for use)
#  3. Any output-only site
###############################################################################

###############################################################################
#The following constraint is added to avoid the HOLD violations in the trace report
#when run for unconstrained paths.These two FF groups will be clocked by two different
# clocks and hence there should be no timing analysis performed on this path.
###############################################################################
INST "u_ddr2_top_0/u_mem_if_top/u_phy_top/u_phy_io/u_phy_calib/gen_gate[*].u_en_dqs_ff" TNM = EN_DQS_FF_C0; 
TIMESPEC TS_FROM_EN_DQS_FF_TO_DQ_CE_FF_C0= FROM EN_DQS_FF_C0 TO TNM_DQ_CE_IDDR_C0 3.85 ns DATAPATHONLY; 

INST "u_ddr2_top_0/*/gen_dqs[0].u_iob_dqs/u_iddr_dq_ce"  LOC = "ILOGIC_X2Y222";
INST "u_ddr2_top_0/*/gen_dqs[0].u_iob_dqs/u_iodelay_dq_ce"  LOC = "IODELAY_X2Y222";
INST "u_ddr2_top_0/*/gen_dqs[1].u_iob_dqs/u_iddr_dq_ce"  LOC = "ILOGIC_X2Y220";
INST "u_ddr2_top_0/*/gen_dqs[1].u_iob_dqs/u_iodelay_dq_ce"  LOC = "IODELAY_X2Y220";

###############################################################################
# LOC and timing constraints for flop driving DQS CE enable signal
# from fabric logic. Even though the absolute delay on this path is
# calibrated out (when synchronizing this output to DQS), the delay
# should still be kept as low as possible to reduce post-calibration
# voltage/temp variations - these are roughly proportional to the
# absolute delay of the path.                                    
#	The following code has been commented for V5 as the predictable IP will take 
#	care of placement of these flops by meeting the MAXDELAY requirement.  
#	These constraints will be removed in the next release.  
###############################################################################

INST "u_ddr2_top_0/*/u_phy_calib/gen_gate[0].u_en_dqs_ff"  LOC = SLICE_X99Y111;
INST "u_ddr2_top_0/*/u_phy_calib/gen_gate[1].u_en_dqs_ff"  LOC = SLICE_X99Y110;

# Control for DQS gate - from fabric flop. Prevent "runaway" delay -
# two parts to this path: (1) from fabric flop to IDELAY, (2) from
# IDELAY to asynchronous reset of IDDR that drives the DQ CE's
# This can be relaxed by the user for lower frequencies:
# 300MHz = 850ps, 267MHz = 900ps. At 200MHz = 950ps.
# In general PAR should be able to route this
# within 900ps over all speed grades.
NET "u_ddr2_top_0/*/u_phy_io/en_dqs[*]" MAXDELAY = 600 ps;
NET "u_ddr2_top_0/*/u_phy_io/gen_dqs*.u_iob_dqs/en_dqs_sync" MAXDELAY = 850 ps;

###############################################################################
# "Half-cycle" path constraint from IOB flip-flop to CE pin for all DQ IDDR's
# for DQS Read Post amble Glitch Squelch circuit
###############################################################################

# Max delay from output of IOB flip-flop to CE input of DQ IDDRs =
#  tRPST + some slack where slack account for rise-time of DQS on board.
#  For now assume slack = 0.400ns (based on initial SPICE simulations,
#  assumes use of ODT), so time = 0.4*Tcyc + 0.40ns = 1.6ns @333MHz
INST "u_ddr2_top_0/*/gen_dqs[*].u_iob_dqs/u_iddr_dq_ce" TNM = "TNM_DQ_CE_IDDR_C0";
INST "u_ddr2_top_0/*/gen_dq[*].u_iob_dq/gen_stg2_*.u_iddr_dq" TNM = "TNM_DQS_FLOPS_C0";
TIMESPEC "TS_DQ_CE_C0" = FROM "TNM_DQ_CE_IDDR_C0" TO "TNM_DQS_FLOPS_C0" 1.9 ns;







###############################################################################
# Define multicycle paths - these paths may take longer because additional
# time allowed for logic to settle in calibration/initialization FSM
###############################################################################

# MIG 2.1: Eliminate Timegroup definitions for CLK0, and CLK90. Instead trace
#          multicycle paths from originating flip-flop to ANY destination
#          flip-flop (or in some cases, it can also be a BRAM)
# MUX Select for either rising/falling CLK0 for 2nd stage read capture
INST "u_ddr2_top_1/*/u_phy_calib/gen_rd_data_sel*.u_ff_rd_data_sel" TNM = "TNM_RD_DATA_SEL_C1";
TIMESPEC "TS_MC_RD_DATA_SEL_C1" = FROM "TNM_RD_DATA_SEL_C1" TO FFS
"TS_SYS_CLK_DDR2_f0" * 4;
# MUX select for read data - optional delay on data to account for byte skews
INST "u_ddr2_top_1/*/u_usr_rd/gen_rden_sel_mux*.u_ff_rden_sel_mux" TNM = "TNM_RDEN_SEL_MUX_C1";
TIMESPEC "TS_MC_RDEN_SEL_MUX_C1" = FROM "TNM_RDEN_SEL_MUX_C1" TO FFS
"TS_SYS_CLK_DDR2_f0" * 4;
# Calibration/Initialization complete status flag (for PHY logic only) - can
# be used to drive both flip-flops and BRAMs
INST "u_ddr2_top_1/*/u_phy_init/u_ff_phy_init_data_sel" TNM = "TNM_PHY_INIT_DATA_SEL_C1";
TIMESPEC "TS_MC_PHY_INIT_DATA_SEL_0_C1" = FROM "TNM_PHY_INIT_DATA_SEL_C1" TO FFS
"TS_SYS_CLK_DDR2_f0" * 4;
# The RAM path is only used in cases where Write Latency (Additive Latency + 
# (CAS Latency - 1) + (1 in case of RDIMM)) is 2 or below. So these constraints are 
# valid for CAS Latency = 3, Additive Latency = 0 and selected part is not RDIMM. 
# If Write Latency is higher than 3, then a warning will appear in PAR, 
# and the constraint can be ignored as this path does not exist. RAM constraint 
# can be safely removed if the warning is not to be displayed.
TIMESPEC "TS_MC_PHY_INIT_DATA_SEL_90_C1" = FROM "TNM_PHY_INIT_DATA_SEL_C1" TO RAMS
"TS_SYS_CLK_DDR2_f0" * 4;
# Select (address) bits for SRL32 shift registers used in stage3/stage4
# calibration
INST "u_ddr2_top_1/*/u_phy_calib/gen_gate_dly*.u_ff_gate_dly" TNM = "TNM_GATE_DLY_C1";
TIMESPEC "TS_MC_GATE_DLY_C1" = FROM "TNM_GATE_DLY_C1" TO FFS "TS_SYS_CLK_DDR2_f0" * 4;

INST "u_ddr2_top_1/*/u_phy_calib/gen_rden_dly*.u_ff_rden_dly" TNM = "TNM_RDEN_DLY_C1";
TIMESPEC "TS_MC_RDEN_DLY_C1" = FROM "TNM_RDEN_DLY_C1" TO FFS "TS_SYS_CLK_DDR2_f0" * 4;

INST "u_ddr2_top_1/*/u_phy_calib/gen_cal_rden_dly*.u_ff_cal_rden_dly"
  TNM = "TNM_CAL_RDEN_DLY_C1";
TIMESPEC "TS_MC_CAL_RDEN_DLY_C1" = FROM "TNM_CAL_RDEN_DLY_C1" TO FFS
"TS_SYS_CLK_DDR2_f0" * 4;
############################################################################### 
#The following constraint is added to prevent (false) hold time violations on
#the data path from stage1 to stage2 capture flops.  Stage1 flops are clocked by 
#the delayed DQS and stage2 flops are clocked by the clk0 clock. Placing a TIG 
#on the DQ IDDR capture flop instance to achieve this is acceptable because timing
#is guaranteed through the use of separate Predictable IP constraints. These
#violations are reported when anunconstrained path report is run.	  
############################################################################### 
INST "*/gen_dq[*].u_iob_dq/gen*.u_iddr_dq" TIG ;
###############################################################################
# DQS Read Post amble Glitch Squelch circuit related constraints
###############################################################################

###############################################################################
# LOC placement of DQS-squelch related IDDR and IDELAY elements
# Each circuit can be located at any of the following locations:
#  1. Unused "N"-side of DQS differential pair I/O
#  2. DM data mask (output only, input side is free for use)
#  3. Any output-only site
###############################################################################

###############################################################################
#The following constraint is added to avoid the HOLD violations in the trace report
#when run for unconstrained paths.These two FF groups will be clocked by two different
# clocks and hence there should be no timing analysis performed on this path.
###############################################################################
INST "u_ddr2_top_1/u_mem_if_top/u_phy_top/u_phy_io/u_phy_calib/gen_gate[*].u_en_dqs_ff" TNM = EN_DQS_FF_C1; 
TIMESPEC TS_FROM_EN_DQS_FF_TO_DQ_CE_FF_C1= FROM EN_DQS_FF_C1 TO TNM_DQ_CE_IDDR_C1 3.85 ns DATAPATHONLY; 

INST "u_ddr2_top_1/*/gen_dqs[0].u_iob_dqs/u_iddr_dq_ce"  LOC = "ILOGIC_X0Y222";
INST "u_ddr2_top_1/*/gen_dqs[0].u_iob_dqs/u_iodelay_dq_ce"  LOC = "IODELAY_X0Y222";
INST "u_ddr2_top_1/*/gen_dqs[1].u_iob_dqs/u_iddr_dq_ce"  LOC = "ILOGIC_X0Y220";
INST "u_ddr2_top_1/*/gen_dqs[1].u_iob_dqs/u_iodelay_dq_ce"  LOC = "IODELAY_X0Y220";

###############################################################################
# LOC and timing constraints for flop driving DQS CE enable signal
# from fabric logic. Even though the absolute delay on this path is
# calibrated out (when synchronizing this output to DQS), the delay
# should still be kept as low as possible to reduce post-calibration
# voltage/temp variations - these are roughly proportional to the
# absolute delay of the path.                                    
#	The following code has been commented for V5 as the predictable IP will take 
#	care of placement of these flops by meeting the MAXDELAY requirement.  
#	These constraints will be removed in the next release.  
###############################################################################

INST "u_ddr2_top_1/*/u_phy_calib/gen_gate[0].u_en_dqs_ff"  LOC = SLICE_X0Y111;
INST "u_ddr2_top_1/*/u_phy_calib/gen_gate[1].u_en_dqs_ff"  LOC = SLICE_X0Y110;

# Control for DQS gate - from fabric flop. Prevent "runaway" delay -
# two parts to this path: (1) from fabric flop to IDELAY, (2) from
# IDELAY to asynchronous reset of IDDR that drives the DQ CE's
# This can be relaxed by the user for lower frequencies:
# 300MHz = 850ps, 267MHz = 900ps. At 200MHz = 950ps.
# In general PAR should be able to route this
# within 900ps over all speed grades.
NET "u_ddr2_top_1/*/u_phy_io/en_dqs[*]" MAXDELAY = 600 ps;
NET "u_ddr2_top_1/*/u_phy_io/gen_dqs*.u_iob_dqs/en_dqs_sync" MAXDELAY = 850 ps;

###############################################################################
# "Half-cycle" path constraint from IOB flip-flop to CE pin for all DQ IDDR's
# for DQS Read Post amble Glitch Squelch circuit
###############################################################################

# Max delay from output of IOB flip-flop to CE input of DQ IDDRs =
#  tRPST + some slack where slack account for rise-time of DQS on board.
#  For now assume slack = 0.400ns (based on initial SPICE simulations,
#  assumes use of ODT), so time = 0.4*Tcyc + 0.40ns = 1.6ns @333MHz
INST "u_ddr2_top_1/*/gen_dqs[*].u_iob_dqs/u_iddr_dq_ce" TNM = "TNM_DQ_CE_IDDR_C1";
INST "u_ddr2_top_1/*/gen_dq[*].u_iob_dq/gen_stg2_*.u_iddr_dq" TNM = "TNM_DQS_FLOPS_C1";
TIMESPEC "TS_DQ_CE_C1" = FROM "TNM_DQ_CE_IDDR_C1" TO "TNM_DQS_FLOPS_C1" 1.9 ns;
